@using CzSoft.CwateMa.Model.Xmd
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Http.Extensions
<header>
    <!-- #region Czompi Group products -->
    <nav class="nav nav-sticky group" aria-label="Czompi Group">
        <div class="container w-100">
            @foreach (GroupConfigItem group in Globals.Group.Groups)
            {
                @if (group.Id == Globals.Group.Current)
                {
                    @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><span class=\"active\">{group.Name}</span></div>")
                }
                else
                {
                    @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><a href=\"{group.Url}\">{group.Name}</a></div>")
                }
            }
        </div>
    </nav>
    <!-- #endregion -->
    <!-- #region Navigation menu -->
    <div class="container">
        <nav class="nav menu" aria-label="Main">
            <a href="/" class="brand">
                <img src="@Cdn.GetUrl($"img/{Globals.Config.Id}/v1.0/{Globals.Config.Id}-logo.svg")">
            </a>
            <a class="nav-mobile" href="#" role="button" data-bs-toggle="collapse" data-bs-target="#navbar-main" aria-controls="navbar-main" aria-expanded="false" aria-label="Toggle navigation"></a>
            <div class="nav-items dropdown-menu navbar-collapse collapse" aria-labelledby="navbar-main" id="navbar-main">

                @foreach (Metadata page in Globals.Pages.Select(itm =>
                {
                   if (itm.NavMenuId == -1) itm.NavMenuId = short.Parse($"{Math.Min(Globals.Pages.Max(x => x.NavMenuId) + Globals.Pages.Count, (int)short.MaxValue)}");
                   return itm;
                }).Where(x => x.IsNavMenuItem == true).OrderBy(x => x.NavMenuId).ThenBy(y => y.Id))
                {
                    <div class="nav-item">
                        <NavLink Match="NavLinkMatch.All" class="" href="@($"/{page.Id}")" ActiveClass="active">
                            @(page.Title)
                        </NavLink>
                    </div>
                }
            </div>
        </nav>
    </div>
    <!-- #endregion -->
</header>
@code {
    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    private string Page => HttpContextAccessor?.HttpContext?.Request.Path.ToString().TrimStart('/') ?? "";

    public string GetPage() => Page;

    protected override void OnParametersSet()
    {
        Globals.RefreshPages();
    }
}